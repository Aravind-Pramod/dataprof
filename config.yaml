# General project settings
project_settings:
  data_path: "data/raw/" # Path to your raw data directory
  output_path: "data/processed/" # Path for any processed data (optional)
  log_level: "INFO" # DEBUG, INFO, WARNING, ERROR, CRITICAL

# Dataset specific configurations
datasets:
  - name: "nyc_taxi_trips" # A unique name for this dataset
    file_type: "parquet" # or "csv", "json" etc.
    file_pattern: "*.parquet" # Pattern to match files in data_path (e.g., "taxi_trips_*.csv")
    columns: # Define expected columns and their types for schema validation (optional but good)
      pickup_datetime: "datetime"
      dropoff_datetime: "datetime"
      passenger_count: "int"
      trip_distance: "float"
      fare_amount: "float"
      vendor_id: "string"
      # Add all other columns you expect

# Data Quality Checks Configuration
data_quality_checks:
  # Completeness (Nulls) Checks
  completeness:
    enabled: true
    thresholds:
      # Max allowed percentage of nulls for a column
      max_null_percentage: 1.0 # e.g., 1.0 means 1% of values can be null
    columns_to_check:
      - passenger_count
      - trip_distance
      - fare_amount
      # Add other columns that should NOT have too many nulls

  # Uniqueness Checks
  uniqueness:
    enabled: true
    thresholds:
      max_duplicate_count: 0 # 0 means no duplicates allowed
    columns_to_check:
      # Columns or combinations of columns that should be unique
      - unique_id # If your data has a primary key
      # - [pickup_datetime, dropoff_datetime, passenger_count] # Example for composite key

  # Validity Checks (basic value/format validation)
  validity:
    enabled: true
    thresholds:
      max_invalid_percentage: 0.5 # e.g., 0.5% of values can be invalid
    checks:
      - column: "fare_amount"
        rule: "range"
        min_value: 0.0 # Fare should be positive
        max_value: 1000.0 # Set a reasonable upper bound for outliers
      - column: "passenger_count"
        rule: "allowed_values"
        values: [1, 2, 3, 4, 5, 6] # Common taxi passenger counts
      - column: "pickup_datetime"
        rule: "datetime_format"
        format: "%Y-%m-%d %H:%M:%S" # Expected date format
      - column: "vendor_id"
        rule: "regex_match"
        pattern: "^[A-Z0-9]{2,5}$" # Example: Vendor ID should be 2-5 uppercase letters/numbers
      # Add more validity rules as needed

  # Consistency Checks (relationships between columns)
  consistency:
    enabled: true
    thresholds:
      max_inconsistent_percentage: 0.1 # Max 0.1% inconsistency allowed
    checks:
      - name: "pickup_before_dropoff"
        rule: "column_order_check"
        column_earlier: "pickup_datetime"
        column_later: "dropoff_datetime"
      - name: "fare_matches_distance"
        rule: "custom_expression"
        expression: "pl.col('fare_amount') >= (pl.col('trip_distance') * 0.5)" # Example: fare should be at least $0.5/mile


# Alerting Configuration
alerting:
  enabled: true
  send_on_success: false # Set to true if you want notifications even for successful runs
  email:
    enabled: true
    sender_email: "your_alert_sender@example.com"
    sender_password: "your_email_password" # Or an app-specific password/API key
    smtp_server: "smtp.example.com" # e.g., "smtp.gmail.com"
    smtp_port: 587 # or 465 (SSL)
    recipients:
      - "your_name@example.com"
      - "team_lead@example.com"
  slack_webhook:
    enabled: false # Set to true to use Slack
    webhook_url: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
    channel: "#data-quality-alerts" # Optional: default channel